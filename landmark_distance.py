# Input
#   - Two sets of landmarks to compare. Each set can contain one or more csv files.
#     The landmarks must refer to individuals present in both files. This script assumes
#     that the csv headers follow this format, the same as generated by create_csv.py: 
#       id,box_id,box_top,box_left,box_width,box_height,X0,Y0...XN,YN
#     

# Output
#   - The eculidian distance in pixels between the two landmark sets for each individual and each landmark. This is a N individual x N landmark csv file.

# Steps
#   1. combine csv files for set one and two
#   2. Find the eculidian distance for each landmark and individual between the two landmark sets

import argparse
import pandas as pd

ap = argparse.ArgumentParser()
ap.add_argument("-1", "--one", type=str, required=True, nargs='+',
    help="one or more csv files of landmarks generated by create_csv.py. For example, all of the test landmarks from n_fold_cv.py", metavar='')
ap.add_argument("-2", "--two", type=str, required=True, nargs='+',
    help="one or more csv of landmarks to compare to set one. The individuals in this set must also be in set one. The column names of csv files in set two must be the same as set one", metavar='')
args = vars(ap.parse_args())


#   1. combine csv files for set one and two
data = []
for csv in args["one"]:
    df = pd.read_csv(csv)
    data.append(df)
df1 = pd.concat(data, ignore_index=True)
data = []
for csv in args["two"]:
    df = pd.read_csv(csv)
    data.append(df)
df2 = pd.concat(data, ignore_index=True)


#   2. Find the eculidian distance for each landmark and individual between the two landmark sets
